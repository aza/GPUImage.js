var NoiseShader = {
  "id": 1053,
  "name": "SimplexNoise",
  "fragmentShader": "precision highp float;\nprecision highp int;\n\n#define _sn_3_sampleNoise _pg_1_\n#define _pg_1_ _sn_1_snoise\n\nvec3 _sn_1_mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 _sn_1_mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 _sn_1_permute(vec4 x) {\n     return _sn_1_mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 _sn_1_taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat _sn_1_snoise(vec3 v)\n{\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n  \n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n  \n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  \n  \n  \n  \n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; \n  vec3 x3 = x0 - D.yyy;      \n\n  \n  i = _sn_1_mod289(i);\n  vec4 p = _sn_1_permute( _sn_1_permute( _sn_1_permute(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n  \n  \n  float n_ = 0.142857142857; \n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  \n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    \n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  \n  \n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n  \n  vec4 norm = _sn_1_taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n  \n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n}\n\n\nvarying vec3 v_loc;\nvec3 _sn_2_getLoc(){ return v_loc; }\n\n\nfloat _sn_3_octive(vec3 loc){\n  float ret = _sn_3_sampleNoise(loc);\n  ret += _sn_3_sampleNoise(loc*2.0)*0.5;\n  ret += _sn_3_sampleNoise(loc*4.0)*0.25;\n  ret += _sn_3_sampleNoise(loc*8.0)*0.125;\n  ret += _sn_3_sampleNoise(loc*16.0)*0.0625;\n  return ret;\n}\n\n\nvec3 _sn_4_floatToColor(float v){ return abs(vec3(v)); }\n\n\nvoid _sn_5_setColor(vec3 color){\n  gl_FragColor = vec4(color, 1.0);\n}\n\nvoid main() {\n  vec3 _io_4_return;\n  float _io_5_return;\n  vec3 _io_8_return;\n\n  _io_4_return = _sn_2_getLoc();\n  _io_5_return = _sn_3_octive(_io_4_return);\n  _io_8_return = _sn_4_floatToColor(_io_5_return);\n  _sn_5_setColor(_io_8_return);\n}",
  "vertexShader": "precision highp float;\nprecision highp int;\n\n\nvarying vec3 v_loc;\n\nvoid main() {\n\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n    v_loc = vec3(position);\n\n}",
  "uniforms": {},
  "url": "http://shaderfrog.com/app/view/1053",
  "user": {
    "username": "FreeTheNation",
    "url": "http://shaderfrog.com/app/profile/andrewray"
  }
}
